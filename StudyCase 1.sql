

Select * from fact

Select * from product

Select * from Location

-------1. Display the number of states present in the LocationTable.
select count (distinct state) from location

------2. How many products are of regular type?
select count(distinct product_) from product where type='regular'

------3. How much spending has been done on marketing of product ID 1?
select sum(marketing) from fact where productId=1

----4. What is the minimum sales of a product?
select min(sales) from fact

------5. Display the max Cost of Good Sold (COGS)
select max(COGS) from fact

-----6. Display the details of the product where product type is coffee.
select*from product where ProductType='coffee'

----7. Display the details where total expenses are greater than 40.
select*from fact where [Total Expenses]>40

-----8. What is the average sales in area code 719?
select avg(sales) from fact where [Area Code]=719

----9. Find out the total profit generated by Colorado state.
select sum(profit) from fact inner join location on fact.[Area Code]=location.AreaCode where state='colorado' 

------10. Display the average inventory for each product ID. 
select productID, avg(inventory) from fact group by ProductId order by productID asc

-----11. Display state in a sequential order in a Location Table. 
select distinct state from location order by state asc

-----12. Display the average budget of the Product where the average budget margin should be greater than 100.
select avg([Budget Margin]), productId from fact group by productID having avg([Budget Margin])>100 

----13. What is the total sales done on date 2010-01-01?
select sum(sales) from fact where date='1/1/10'

-----14. Display the average total expense of each product ID on an individual date.
select date, productID, avg([Total Expenses]) as avgExpenses from fact group by date, ProductId order by date

----15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
select a.Date, a.productID, b.productType, b.product_, a.sales, a.profit, c.state, c.areaCode from fact as a inner join product as b on a.productID=b.productID inner join location as c on a.[Area Code]=c.areaCode

------16. Display the rank without any gap to show the sales wise rank.
select productID, sum(sales) as totalSales, rank() over (order by sum(sales) desc) as rank from fact group by ProductId
 Select sales, row_number()over (order by sales desc) as rank from fact

-------17. Find the state wise profit and sales.
select c.state, sum(a.profit) as profit, sum(a.sales) as sales from location as c inner join fact as a on c.AreaCode=a.[Area Code]  group by state order by state

---------18. Find the state wise profit and sales along with the productname. 
select c.state, b.product_, sum(a.profit) as profit, sum(a.sales) as sales from location as c inner join fact as a on c.AreaCode=a.[Area Code] inner join product as b on b.ProductID=a.ProductId  group by state, product_ order by state

-----19. If there is an increase in sales of 5%, calculate the increased sales. 
select sales, sales*0.05 as kenaikan, (sales*0.05)+sales as salesPluskenaikan from fact

-----20. Find the maximum profit along with the product ID and producttype.
select a.productID, b.producttype, max(a.profit) from fact as a inner join product as b on a.ProductId=b.ProductID group by a.ProductId, b.ProductType order by a.ProductId

-----21. Create a stored procedure to fetch the result according to the product type from Product Table. 
create procedure ptype @prod_type varchar(20)
as 
select * from product where producttype=@prod_type
exec ptype @prod_type= 'coffee'

Select * from fact
Select * from product
Select * from Location

---------22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select [Total Expenses], iif([Total Expenses] <60, 'profit', 'loss') as result from fact

------23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
SELECT DATEPART(week, date) AS week, date, productid, SUM(sales) AS total_sales
FROM Fact
group by datepart(week, date), date, productid

---------24. Apply union and intersection operator on the tables which consist of attribute area code. 
select [Area Code] from fact union select areacode from location 
select [Area Code] from fact intersect select areacode from location 


-----------25. Create a user-defined function for the product table to fetch a particular product type based upon the user?s preference.
CREATE FUNCTION GetProductByType (@prod_type VARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT * 
    FROM Product 
    WHERE ProductType = @prod_type
);

SELECT * FROM dbo.GetProductByType('coffee');
SELECT * FROM dbo.GetProductByType('tea');

-------26. Change the product type from coffee to tea where product ID is 1 and undo it. 
BEGIN TRANSACTION;

-- Update the product type
UPDATE Product
SET ProductType = 'Tea'
WHERE ProductID = 1;

-- To undo the change, rollback the transaction
ROLLBACK TRANSACTION;

------27. Display the date, product ID and sales where total expenses are between 100 to 200
select date, productID, sales, [Total Expenses] from fact where [Total Expenses] between 100 and 200 order by [Total Expenses] asc

--------28. Delete the records in the Product Table for regular type. 
DELETE FROM Product WHERE Type = 'regular';


-----29. Display the ASCII value of the fifth character from the columnProduct.
select product_, ascii(substring(product_,5,1)) as fifthascii from product
